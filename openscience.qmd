# OpenScience {#sec-open-science .unnumbered}

Now that you know what computational notebooks are and why we should care about them, let's start using them! This section introduces you to using R or Python for manipulating tabular data. Please read through it carefully and pay attention to how ideas about manipulating data are translated into code. For this part, you can read directly from the course website, although it is recommended you follow the section interactively by running the code on your own.

Once you have read through, jump on the [Do-It-Yourself](https://pietrostefani.github.io/gds/openscienceDIY.html) section, which will provide you with a challenge that you should complete on your own, and will allow you to put what you have already learnt into practice.

## Data wrangling

Real world datasets tend to be messy. There is no way around it: datasets have "holes" (missing data), the amount of formats in which data can be stored is endless, and the best structure to share data is not always the optimum to analyze them, hence the need to wrangle (manipulate, transform and structure) them. As has been correctly pointed out in many outlets ([e.g.](https://www.nytimes.com/2014/08/18/technology/for-big-data-scientists-hurdle-to-insights-is-janitor-work.html?_r=0)), much of the [time](https://twitter.com/BigDataBorat/status/306596352991830016) spent in what is called (Geo-)Data Science is related not only to sophisticated modeling and insight, but to more basic and less exotic tasks such as obtaining data, processing, turning them into a shape that makes analysis possible, and exploring it to get to know their basic properties.

In this session, you will use a few real world datasets and learn how to process them in R or Python so they can be transformed and manipulated, if necessary, and analyzed. For this, we will introduce some of the fundamental tools of data analysis and scientific computing. We use a prepared dataset that saves us much of the more intricate processing that goes beyond the introductory level the session is aimed at.

In this notebook, we discuss several patterns to clean and structure data properly, including tidying, subsetting, and aggregating; and we finish with some basic visualization. An additional extension presents more advanced tricks to manipulate tabular data.

Before we get our hands data-dirty, let us import all the additional libraries we will need to run the code:

## Loading packages

We will start by loading core packages for working with geographic vector and attribute data.

::: {.panel-tabset group="language"}
## R

```{r message=FALSE}
library(tidyverse) # a structure of data manipulation including several packages 
library(data.table)
```

## Python


```{python}
# This ensures visualizations are plotted inside the notebook

import os              # This provides several system utilities
import pandas as pd    # This is the workhorse of data munging in Python
import seaborn as sns  # This allows us to efficiently and beautifully plot
```

:::

## Datasets

We will be exploring some demographic characteristics in Liverpool. To do that, we will use a dataset that contains population counts, split by ethnic origin. These counts are aggregated at the Lower Layer Super Output Area (LSOA from now on). LSOAs are an official Census geography defined by the Office of National Statistics. You can think of them, more or less, as neighbourhoods. Many data products (Census, deprivation indices, etc.) use LSOAs as one of their main geographies.

To make things easier, we will read data from a file posted online so, for now, you do not need to download any dataset:

**Import housesales data from csv**

::: {.panel-tabset group="language"}
## R

```{r}
census2021 <- read.csv("data/census2021_ethn/liv_pop.csv", row.names = "GeographyCode")
```

Let us stop for a minute to learn how we have read the file. Here are the main aspects to keep in mind:

-   We are using the method `read.csv` from base R, you could also use `read_csv` from `library("readr")`.

-   Here the csv is based on a data file but it could also be a web address or sometimes you find data in packages.

-   The argument row.names is not strictly necessary but allows us to choose one of the columns as the index of the table. More on indices below.

-   We are using read.csv because the file we want to read is in the csv format. However, many more formats can be read into an R environment. A full list of formats supported may be found [here](https://www.datacamp.com/tutorial/r-data-import-tutorial).

-   To ensure we can access the data we have read, we store it in an object that we call `census2021`. We will see more on what we can do with it below but, for now, just keep in mind that allows us to save the result of `read.csv`.

## Python

```{python}
census2021 = pd.read_csv("data/census2021_ethn/liv_pop.csv", index_col='GeographyCode')
```

Let us stop for a minute to learn how we have read the file. Here are the main aspects to keep in mind:

-   We are using the method `read_csv` from the pandas library, which we have imported with the alias `pd`.

-   Here the csv is based on a data file but it could also be a web address or sometimes you find data in packages.

-   The argument index_col is not strictly necessary but allows us to choose one of the columns as the index of the table. More on indices below.

-   We are using `read_csv` because the file we want to read is in the csv format. However, pandas allows for many more formats to be read and write. A full list of formats supported may be found [here](https://www.datacamp.com/tutorial/r-data-import-tutorial).

-   To ensure we can access the data we have read, we store it in an object that we call `census2021`. We will see more on what we can do with it below but, for now, just keep in mind that allows us to save the result of `read_csv`.
:::

**Important**

You need to store the data file on your computer, and read it locally. To do that, you can follow these steps: 1. Download the file by right-clicking [on this link](https://github.com/pietrostefani/gds/tree/main/data) and saving the file 2. Place the file on the same folder as the notebook where you intend to read it.

## Data, sliced and diced

Now we are ready to start playing with and interrogating the dataset! What we have at our fingertips is a table that summarizes, for each of the LSOAs in Liverpool, how many people live in each, by the region of the world where they were born. We call these tables `DataFrame` objects, and they have a lot of functionality built-in to explore and manipulate the data they contain.

**Structure**

Let's start by exploring the structure of a `DataFrame`. We can print it by simply typing its name:

::: {.panel-tabset group="language"}
## R

```{r}
view(census2021)
```

## Python

```{python}
census2021
```
:::

Since they represent a table of data, `DataFrame` objects have two dimensions: rows and columns. Each of these is automatically assigned a name in what we will call its index. When printing, the index of each dimension is rendered in bold, as opposed to the standard rendering for the content. In the example above, we can see how the column index is automatically picked up from the .csv file's column names. For rows, we have specified when reading the file we wanted the column GeographyCode, so that is used. If we hadn't specified any, `pandas` in Python or `tidyverse` in R will automatically generate a sequence starting in 0 and going all the way to the number of rows minus one. This is the standard structure of a `DataFrame` object, so we will come to it over and over. Importantly, even when we move to spatial data, our datasets will have a similar structure.

One further feature of these tables is that they can hold columns with different types of data. In our example, this is not used as we have counts (or int, for integer, types) for each column. But it is useful to keep in mind we can combine this with columns that hold other type of data such as categories, text (str, for string), dates or, as we will see later in the course, geographic features.

**Inspecting**

We can check the top (bottom) X lines of the table by passing X to the method head (tail). For example, for the top/bottom five lines:

::: {.panel-tabset group="language"}
## R

```{r}
head(census2021) # read first 5 rows
tail(census2021)
```

## Python

```{python}
census2021.head() # read first 5 rows
census2021.tail() # read last 5 rows
```
:::

**Summarise**

We can get an overview of the values of the table:

::: {.panel-tabset group="language"}
## R

```{r}
summary(census2021)
```

## Python

```{python}
census2021.describe()
```
:::

Note how the output is also a `DataFrame` object, so you can do with it the same things you would with the original table (e.g. writing it to a file).

In this case, the summary might be better presented if the table is "transposed":

::: {.panel-tabset group="language"}
## R

```{r}
t(summary(census2021))
```

## Python

```{python}
census2021.describe().T
```
:::

## Columns

**Create new columns**

We can generate new variables by applying operations on existing ones. For example, we can calculate the total population by area. Here is a couple of ways to do it:

::: {.panel-tabset group="language"}
## R

On base R

```{r}
census2021$Total_Population <- rowSums(census2021[, c("Africa", "Middle.East.and.Asia", "Europe", "The.Americas.and.the.Caribbean", "Antarctica.and.Oceania")])
```

Using the package [`dplyr`](https://www.tidyverse.org/packages/)

```{r}
census2021 <- census2021 %>%
  mutate(Total_Pop = rowSums(select(., Africa, Middle.East.and.Asia, Europe, The.Americas.and.the.Caribbean, Antarctica.and.Oceania)))

head(census2021)
```

A different spin on this is assigning new values: we can generate new variables with scalars, and modify those:

```{r}
census2021$new_column <- 1
head(census2021)
```

`dplyr` is an immensely useful package in R because it streamlines and simplifies the process of data manipulation and transformation. With its intuitive and consistent syntax, dplyr provides a set of powerful and efficient functions that make tasks like filtering, summarizing, grouping, and joining datasets much more straightforward. Whether you're working with small or large datasets, `dplyr`'s optimized code execution ensures fast and efficient operations. Its ability to chain functions together using the pipe operator (`%>%`) allows for a clean and readable code structure, enhancing code reproducibility and collaboration. Overall, `dplyr` is an indispensable tool for data analysts and scientists working in R, enabling them to focus on their data insights rather than wrestling with complex data manipulation code.

## Python

Longer, hardcoded:

```{python}
total = census2021['Europe'] + census2021['Africa'] + census2021['Middle East and Asia'] + census2021['The Americas and the Caribbean'] + census2021['Antarctica and Oceania']
# Print the top of the variable
total.head()
```

One shot:

```{python}
census2021['Total_Population'] = census2021.sum(axis=1)
# Print the top of the variable
census2021.head()
```

Note that we are summing over "axis=1". In a `DataFrame` object, "axis 0" and "axis 1" represent the rows and columns respectively.

A different spin on this is assigning new values: we can generate new variables with scalars, and modify those:

```{python}
# New variable with all ones
census2021['ones'] = 1
census2021.head()
```
:::

**Delete columns**

Permanently deleting variables is also within reach of one command:

::: {.panel-tabset group="language"}
## R

Base R

```{r}
census2021 <- subset(census2021, select = -new_column)
```

`dplyr`

```{r}
census2021 <- census2021 %>%
  mutate(new_column = 1)
```

## Python

```{python}
del census2021['ones']
census2021.head()
```
:::

## Queries

**Index-based queries**

Here we explore how we can subset parts of a `DataFrame` if we know exactly which bits we want. For example, if we want to extract the total and European population of the first four areas in the table:

::: {.panel-tabset group="language"}
## R

We can select with `c()`. If this structure is new to you have a look [here](https://pietrostefani.github.io/gds/environR.html).

```{r}
eu_tot_first4 <- census2021[c('E01006512', 'E01006513', 'E01006514', 'E01006515'), c('Total_Population', 'Europe')]

eu_tot_first4
```

## Python

We use `loc` with lists:

```{python}
eu_tot_first4 = census2021.loc[['E01006512', 'E01006513', 'E01006514', 'E01006515'], ['Total_Population', 'Europe']]

eu_tot_first4
```
:::

**Condition-based queries**

However, sometimes, we do not know exactly which observations we want, but we do know what conditions they need to satisfy (e.g. areas with more than 2,000 inhabitants). For these cases, `DataFrames` support selection based on conditions. Let us see a few examples. Suppose we want to select...

::: {.panel-tabset group="language"}
## R

Areas with more than 900 people in Total:

```{r}
pop900 <- census2021 %>%
  filter(Total_Population > 900)
```

Areas where there are no more than 750 Europeans:

```{r}
euro750 <- census2021 %>%
  filter(Europe < 750)
```

Areas with exactly ten person from Antarctica and Oceania:

```{r}
oneOA <- census2021 %>%
  filter(`Antarctica.and.Oceania` == 10)
```

## Python

Areas with more than 900 people in Total:

```{python}
pop900 = census2021.loc[census2021['Total_Population'] > 900, :]
pop900
```

Areas where there are no more than 750 Europeans:

```{python}
euro750 = census2021.loc[census2021['Europe'] < 750, :]
euro750
```

Areas with exactly ten person from Antarctica and Oceania:

```{python}
oneOA = census2021.loc[census2021['Antarctica and Oceania'] == 10, :]
oneOA
```
:::

*Pro-tip*: These queries can grow in sophistication with almost no limits.

**Combining queries**

Now all of these queries can be combined with each other, for further flexibility. For example, imagine we want areas with more than 25 people from the Americas and Caribbean, but less than 1,500 in total:

::: {.panel-tabset group="language"}
## R

```{r}
ac25_l500 <- census2021 %>%
  filter(The.Americas.and.the.Caribbean > 25, Total_Population < 1500)
ac25_l500

```

## Python

```{python}
ac25_l500 = census2021.loc[(census2021['The Americas and the Caribbean'] > 25) &                    (census2021['Total_Population'] < 1500), :]
ac25_l500
```
:::

## Sorting

Among the many operations `DataFrame` objects support, one of the most useful ones is to sort a table based on a given column. For example, imagine we want to sort the table by total population:

::: {.panel-tabset group="language"}
## R

```{r}
db_pop_sorted <- census2021 %>%
  arrange(desc(Total_Pop)) #sorts the dataframe by the "Total_Pop" column in descending order 

head(db_pop_sorted)
```

## Python

```{python}
db_pop_sorted = census2021.sort_values('Total_Population', ascending=False)
db_pop_sorted.head()
```
:::

## Additional resources

-   A good introduction to data manipulation in Python is Wes McKinney's ["Python for Data Analysis"](https://wesmckinney.com/book/)

-   A good introduction to data manipulation in R is the ["Data wrangling"](https://r4ds.had.co.nz/wrangle-intro.html) chapter in R for Data Science.

-   A good extension is Hadley Wickham' ["Tidy data"](https://vita.had.co.nz/papers/tidy-data.pdf) paper which presents a very popular way of organising tabular data for efficient manipulation.
