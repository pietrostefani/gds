---
title: "Computational Essay"
author: "..."
toc: true
format: 
  html:
    html-math-method: katex
    code-tools: false
    self-contained: true
    embed-resources: true
editor: visual
execute: 
  warning: false
---

# Installing Packages

# Introduction

# Body

# Conclusion

# References

• Maximum of 1,000 words (ordinary text) (references do not contribute to the word count). You should answer the specified questions within the narrative. The questions should be included within a wider analysis. • Up to five maps or figures (a figure may include more than one map and will only count as one but needs to be integrated in the same overall output) • Up to one table

NOTE: Below is some code to get you started if you want to use Tidycensus for the socio-economic data

# Tidycensus

To get started working with tidycensus, users should load the package along with the tidyverse package, and set you Census API key. A key can be obtained from http://api.census.gov/data/key_signup.html.

```{r tidycensus, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidycensus)
library(tidyverse)
library(sf)
census_api_key("PLACE YOUR KEY HERE") 
options(tigris_use_cache = TRUE) #  tidycensus will use the tigris package to retrieve the corresponding geographic dataset from the US Census Bureau and pre-merge it with the tabular data obtained from the Census API.

https://rdrr.io/cran/tigris/man/zctas.html
```

## Searching for variables

-   Variables in tidycensus are identified by their Census ID, e.g. B19013_001

-   Entire tables of variables can be requested with the table argument, e.g. table = "B19001"

-   Users can request multiple variables at a time, and set custom names with a named vector

Getting variables from the US American Community Survey (ACS) 5-Year Data (2016-2020) requires knowing the variable ID - and there are thousands of these IDs across the different files. To rapidly search for variables, use the load_variables() function. The function takes two required arguments: the year of the Census or endyear of the ACS sample, and the dataset name, which varies in availability by year. For the ACS, use either "acs1" or "acs5" for the ACS detailed tables, and append /profile for the Data Profile and /subject for the Subject Tables. To browse these variables, assign the result of this function to a variable and use the View function in RStudio. An optional argument cache = TRUE will cache the dataset on your computer for future use.

```{r}
view_vars <- load_variables(2020, "acs5", cache = TRUE)

View(view_vars)
```

# An Example: New York City

The following example shows median household income from the 2016-2020 ACS for Census tracts in New York State:

```{r nyc}

nyc <- get_acs(
  state = "New York",
  county = "New York",
  geography = "tract",
  variables = "B19013_001",
  geometry = TRUE,
  year = 2020
)

head(nyc)
```

Visualizing median household income New York:

```{r}
nyc %>%
  ggplot(aes(fill = estimate)) + 
  geom_sf(color = NA) + 
  scale_fill_viridis_c(option = "magma") 
```

Getting Median household income for our Areas of Interest in the Summative

```{r San Fran}
bay <- get_acs(
  state = "CA",
  county = c(sanfran = "San Francisco", sanmateo = "San Mateo", contracosta = "Contra Costa", alameda= "Alameda"),
  geography = "tract",
  variables = "B19013_001",
  geometry = TRUE,
  year = 2020
)

head(bay)

plot(bay$geometry)
```

Visualizing median household income in the Bay Are - be careful you will want to restrict the extent of your box

```{r}
bay %>%
  ggplot(aes(fill = estimate)) + 
  geom_sf(color = NA) + 
  scale_fill_viridis_c(option = "magma") 
```

# Getting *all* our data for our Areas of Interest

You will need look at https://api.census.gov/data/2020/acs/acs5/variables.html

Example - Race

```{r San Fran Population Race}
bay_race <- get_acs(
  state = "CA",
  county = c(sanfran = "San Francisco", sanmateo = "San Mateo", contracosta = "Contra Costa", alameda= "Alameda"),
  geography = "tract",
  table = "B02001",  # use table to GET all the variables in this given category
  output = "wide",
  year = 2020
)

bay_race <- select (bay_race,-c(NAME))
bay_race <- rename(bay_race, all_ppl_race = B02001_001E, black = B02001_003E)


head(bay_race)
#bay_race <- rename(df, numeric_var = OriginalNumericVar, character_var = Original.Character.Var)
```

# Join

```{r}
bay_all <- join_all(list(bay_race, XXXXXadd_in_all_your_other_dataframes), by='GEOID', type='left')

head(bay_all)
bay_all <- select (bay_all,-c(NAME))
st_write(bay_all, "data/ACS_2016_2020_vars.csv")

bay_plot <- left_join(bay, 
                       bay_all, 
                       by='GEOID')
```

## \# References and Helpful links

https://api.census.gov/data/2020/acs/acs5/variables.html https://walker-data.com/tidycensus/articles/basic-usage.html https://walker-data.com/tidycensus/ https://walker-data.com/tidycensus/articles/spatial-data.html https://walker-data.com/isds-webinar/#34
